### ============================================
### LDAP SPRING BOOT - COMPLETE TEST SUITE
### Authentication, Authorization & CRUD Operations
### Base URL: http://localhost:8080
### ============================================

### ============================================
### SECTION 1: SYSTEM HEALTH & CONNECTIVITY
### ============================================

### 1.1 Application Health Check
GET http://localhost:8080/api/debug/ping

###

### 1.2 LDAP Connection Test
GET http://localhost:8080/api/debug/ldap-context

###

### 1.3 LDAP Base DN Test
GET http://localhost:8080/api/debug/test-base

###

### 1.4 LDAP People OU Test
GET http://localhost:8080/api/debug/test-people

###

### 1.5 LDAP Structure Exploration
GET http://localhost:8080/api/debug/ldap-structure

###

### 1.6 Existing Users in LDAP
GET http://localhost:8080/api/debug/test-users-in-people

###

### ============================================
### SECTION 2: AUTHENTICATION TESTS
### ============================================

### 2.1 Login with Existing User (johndoe)
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
  "username": "johndoe",
  "password": "password123"
}

###
@authToken = {{login.response.body.accessToken}}
@refreshToken = {{login.response.body.refreshToken}}

### 2.2 Login with Another Existing User (anna.meier)
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
  "username": "anna.meier",
  "password": "password456"
}

###

### 2.3 Login with Third User (peter.schmidt)
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
  "username": "peter.schmidt",
  "password": "password789"
}

###
@peterToken = {{login.response.body.accessToken}}

### 2.4 Login Failure - Wrong Password
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
  "username": "johndoe",
  "password": "wrongpassword"
}

###

### 2.5 Login Failure - Non-existent User
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
  "username": "nonexistent",
  "password": "password123"
}

###

### 2.6 Login Failure - Empty Username
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
  "username": "",
  "password": "password123"
}

###

### 2.7 Login Failure - Empty Password
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
  "username": "johndoe",
  "password": ""
}

###

### 2.8 Login Failure - Missing Fields
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
  "username": "johndoe"
}

###

### ============================================
### SECTION 3: JWT TOKEN OPERATIONS
### ============================================

### 3.1 Get Current User Info (with valid token)
GET http://localhost:8080/api/auth/me
Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqb2huZG9lIiwiZW1haWwiOiJqb2huZG9lQGV4YW1wbGUub3JnIiwiZnVsbE5hbWUiOiJKb2huIERvZSIsInJvbGVzIjpbIlVTRVIiXSwiaWF0IjoxNzM1NjgyMzM2LCJleHAiOjE3MzU3Njg3MzZ9.TOKEN_HERE

###

### 3.2 Validate Token
GET http://localhost:8080/api/auth/validate
Authorization: Bearer TOKEN_HERE

###

### 3.3 Token Validation Failure - Invalid Token
GET http://localhost:8080/api/auth/validate
Authorization: Bearer invalid.token.here

###

### 3.4 Token Validation Failure - Missing Token
GET http://localhost:8080/api/auth/validate

###

### 3.5 Token Validation Failure - Malformed Header
GET http://localhost:8080/api/auth/validate
Authorization: InvalidBearer TOKEN_HERE

###

### 3.6 Refresh Token - Valid
POST http://localhost:8080/api/auth/refresh
Content-Type: application/json

{
  "refreshToken": "REFRESH_TOKEN_HERE"
}

###

### 3.7 Refresh Token - Invalid
POST http://localhost:8080/api/auth/refresh
Content-Type: application/json

{
  "refreshToken": "invalid.refresh.token"
}

###

### 3.8 Refresh Token - Empty
POST http://localhost:8080/api/auth/refresh
Content-Type: application/json

{
  "refreshToken": ""
}

###

### 3.9 Logout - Valid Token
POST http://localhost:8080/api/auth/logout
Authorization: Bearer TOKEN_HERE

###

### 3.10 Logout - Invalid Token
POST http://localhost:8080/api/auth/logout
Authorization: Bearer invalid.token

###

### ============================================
### SECTION 4: USER CRUD OPERATIONS
### ============================================

### 4.1 Create New User for Testing
POST http://localhost:8080/api/create
Content-Type: application/json

{
  "uid": "testauth",
  "fullName": "Test Auth User",
  "lastName": "User",
  "email": "testauth@example.org",
  "password": "testpass123"
}

###

### 4.2 Login with Newly Created User
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
  "username": "testauth",
  "password": "testpass123"
}

###
@newUserToken = {{login.response.body.accessToken}}

### 4.3 Get Current User Info (newly created user)
GET http://localhost:8080/api/auth/me
Authorization: Bearer {{newUserToken}}

###

### 4.4 Get All Users (should include new user)
GET http://localhost:8080/api/user/getall

###

### 4.5 Get Specific User by UID
GET http://localhost:8080/api/user/testauth

###

### 4.6 Create User with Complex Data
POST http://localhost:8080/api/create
Content-Type: application/json

{
  "uid": "complex.user",
  "fullName": "Çomplëx Ûser Nâme",
  "lastName": "Ûser",
  "email": "complex.user@example.org",
  "password": "C0mpl3x!P@ssw0rd#123"
}

###

### 4.7 Login with Complex User
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
  "username": "complex.user",
  "password": "C0mpl3x!P@ssw0rd#123"
}

###

### 4.8 Create User - Duplicate UID (should fail)
POST http://localhost:8080/api/create
Content-Type: application/json

{
  "uid": "testauth",
  "fullName": "Duplicate User",
  "lastName": "Duplicate",
  "email": "duplicate@example.org",
  "password": "password123"
}

###

### 4.9 Create User - Missing Required Fields
POST http://localhost:8080/api/create
Content-Type: application/json

{
  "uid": "incomplete",
  "email": "incomplete@example.org"
}

###

### 4.10 Create User - No Password (should use default)
POST http://localhost:8080/api/create
Content-Type: application/json

{
  "uid": "nopass",
  "fullName": "No Password User",
  "lastName": "User",
  "email": "nopass@example.org"
}

###

### 4.11 Login with Default Password User
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
  "username": "nopass",
  "password": "defaultpass123"
}

###

### ============================================
### SECTION 5: ROLE-BASED ACCESS TESTS
### ============================================

### 5.1 Create Admin User
POST http://localhost:8080/api/create
Content-Type: application/json

{
  "uid": "admin.user",
  "fullName": "Admin User",
  "lastName": "Admin",
  "email": "admin@example.org",
  "password": "adminpass123"
}

###

### 5.2 Login as Admin
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
  "username": "admin.user",
  "password": "adminpass123"
}

###
@adminToken = {{login.response.body.accessToken}}

### 5.3 Check Admin User Roles
GET http://localhost:8080/api/auth/me
Authorization: Bearer {{adminToken}}

###

### 5.4 Create Developer User
POST http://localhost:8080/api/create
Content-Type: application/json

{
  "uid": "dev.user",
  "fullName": "Developer User",
  "lastName": "Developer",
  "email": "developer@example.org",
  "password": "devpass123"
}

###

### 5.5 Login as Developer
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
  "username": "dev.user",
  "password": "devpass123"
}

###
@devToken = {{login.response.body.accessToken}}

### 5.6 Check Developer User Roles
GET http://localhost:8080/api/auth/me
Authorization: Bearer {{devToken}}

###

### ============================================
### SECTION 6: TOKEN EXPIRY & REFRESH TESTS
### ============================================

### 6.1 Login and Store Tokens
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
  "username": "testauth",
  "password": "testpass123"
}

###
@testAccessToken = {{login.response.body.accessToken}}
@testRefreshToken = {{login.response.body.refreshToken}}

### 6.2 Use Access Token Immediately
GET http://localhost:8080/api/auth/me
Authorization: Bearer {{testAccessToken}}

###

### 6.3 Refresh Token Test
POST http://localhost:8080/api/auth/refresh
Content-Type: application/json

{
  "refreshToken": "{{testRefreshToken}}"
}

###
@newAccessToken = {{refresh.response.body.accessToken}}
@newRefreshToken = {{refresh.response.body.refreshToken}}

### 6.4 Use New Access Token
GET http://localhost:8080/api/auth/me
Authorization: Bearer {{newAccessToken}}

###

### 6.5 Try Using Old Refresh Token (should still work until expiry)
POST http://localhost:8080/api/auth/refresh
Content-Type: application/json

{
  "refreshToken": "{{testRefreshToken}}"
}

###

### ============================================
### SECTION 7: CONCURRENT SESSION TESTS
### ============================================

### 7.1 Multiple Logins - Same User
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
  "username": "testauth",
  "password": "testpass123"
}

###
@session1Token = {{login.response.body.accessToken}}

### 7.2 Second Login - Same User
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
  "username": "testauth",
  "password": "testpass123"
}

###
@session2Token = {{login.response.body.accessToken}}

### 7.3 Use First Session Token
GET http://localhost:8080/api/auth/me
Authorization: Bearer {{session1Token}}

###

### 7.4 Use Second Session Token
GET http://localhost:8080/api/auth/me
Authorization: Bearer {{session2Token}}

###

### 7.5 Logout First Session
POST http://localhost:8080/api/auth/logout
Authorization: Bearer {{session1Token}}

###

### 7.6 Try Using First Session After Logout (should still work - no blacklist yet)
GET http://localhost:8080/api/auth/me
Authorization: Bearer {{session1Token}}

###

### ============================================
### SECTION 8: LOAD & STRESS TESTS
### ============================================

### 8.1 Bulk User Creation - User 1
POST http://localhost:8080/api/create
Content-Type: application/json

{
  "uid": "bulk001",
  "fullName": "Bulk User 001",
  "lastName": "User",
  "email": "bulk001@example.org",
  "password": "bulkpass123"
}

###

### 8.2 Bulk User Creation - User 2
POST http://localhost:8080/api/create
Content-Type: application/json

{
  "uid": "bulk002",
  "fullName": "Bulk User 002",
  "lastName": "User",
  "email": "bulk002@example.org",
  "password": "bulkpass123"
}

###

### 8.3 Bulk User Creation - User 3
POST http://localhost:8080/api/create
Content-Type: application/json

{
  "uid": "bulk003",
  "fullName": "Bulk User 003",
  "lastName": "User",
  "email": "bulk003@example.org",
  "password": "bulkpass123"
}

###

### 8.4 Parallel Logins - Bulk User 1
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
  "username": "bulk001",
  "password": "bulkpass123"
}

###

### 8.5 Parallel Logins - Bulk User 2
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
  "username": "bulk002",
  "password": "bulkpass123"
}

###

### 8.6 Parallel Logins - Bulk User 3
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
  "username": "bulk003",
  "password": "bulkpass123"
}

###

### 8.7 Get All Users (should show all created users)
GET http://localhost:8080/api/user/getall

###

### ============================================
### SECTION 9: EDGE CASES & ERROR HANDLING
### ============================================

### 9.1 Login with SQL Injection Attempt
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
  "username": "admin'; DROP TABLE users; --",
  "password": "password123"
}

###

### 9.2 Login with XSS Attempt
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
  "username": "<script>alert('XSS')</script>",
  "password": "password123"
}

###

### 9.3 Login with Very Long Username
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
  "username": "ThisIsAVeryLongUsernameToTestTheSystemLimitsAndSeeHowItHandlesExtremelyLongInputsWithoutBreakingTheApplication",
  "password": "password123"
}

###

### 9.4 Login with Special Characters
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
  "username": "tëst.üser@çompany.com",
  "password": "password123"
}

###

### 9.5 Create User with Extremely Long Password
POST http://localhost:8080/api/create
Content-Type: application/json

{
  "uid": "longpass",
  "fullName": "Long Password User",
  "lastName": "User",
  "email": "longpass@example.org",
  "password": "ThisIsAnExtremelyLongPasswordToTestPasswordHandlingLimitsAndEnsureTheSystemCanProcessVeryLongPasswordsWithoutBreakingOrCausingSecurityIssues123!@#$%^&*()"
}

###

### 9.6 Login with Long Password
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
  "username": "longpass",
  "password": "ThisIsAnExtremelyLongPasswordToTestPasswordHandlingLimitsAndEnsureTheSystemCanProcessVeryLongPasswordsWithoutBreakingOrCausingSecurityIssues123!@#$%^&*()"
}

###

### 9.7 Invalid JSON Request
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
  "username": "testuser",
  "password": "password123",
  "invalidField": "shouldCauseParseError"
}

###

### 9.8 Malformed Authorization Header
GET http://localhost:8080/api/auth/me
Authorization: NotBearer InvalidTokenFormat

###

### 9.9 Empty Request Body
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{}

###

### ============================================
### SECTION 10: INTEGRATION TESTS
### ============================================

### 10.1 Complete User Journey - Registration to Logout
# Step 1: Create user
POST http://localhost:8080/api/create
Content-Type: application/json

{
  "uid": "journey.user",
  "fullName": "Journey User",
  "lastName": "User",
  "email": "journey@example.org",
  "password": "journeypass123"
}

###

# Step 2: Login
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
  "username": "journey.user",
  "password": "journeypass123"
}

###
@journeyToken = {{login.response.body.accessToken}}
@journeyRefresh = {{login.response.body.refreshToken}}

# Step 3: Get user info
GET http://localhost:8080/api/auth/me
Authorization: Bearer {{journeyToken}}

###

# Step 4: Validate token
GET http://localhost:8080/api/auth/validate
Authorization: Bearer {{journeyToken}}

###

# Step 5: Refresh token
POST http://localhost:8080/api/auth/refresh
Content-Type: application/json

{
  "refreshToken": "{{journeyRefresh}}"
}

###
@newJourneyToken = {{refresh.response.body.accessToken}}

# Step 6: Use new token
GET http://localhost:8080/api/auth/me
Authorization: Bearer {{newJourneyToken}}

###

# Step 7: Logout
POST http://localhost:8080/api/auth/logout
Authorization: Bearer {{newJourneyToken}}

###

### ============================================
### SECTION 11: CLEANUP OPERATIONS
### ============================================

### 11.1 Delete Test Users
POST http://localhost:8080/api/deleteuser/testauth

###

POST http://localhost:8080/api/deleteuser/complex.user

###

POST http://localhost:8080/api/deleteuser/nopass

###

POST http://localhost:8080/api/deleteuser/admin.user

###

POST http://localhost:8080/api/deleteuser/dev.user

###

POST http://localhost:8080/api/deleteuser/bulk001

###

POST http://localhost:8080/api/deleteuser/bulk002

###

POST http://localhost:8080/api/deleteuser/bulk003

###

POST http://localhost:8080/api/deleteuser/longpass

###

POST http://localhost:8080/api/deleteuser/journey.user

###

### 11.2 Final System Check
GET http://localhost:8080/api/user/getall

###

### 11.3 Final Health Check
GET http://localhost:8080/api/debug/ping

###

### ============================================
### TEST EXECUTION NOTES:
### ============================================
###
### PREREQUISITES:
### 1. Start LDAP server: cd ldap-docker && docker-compose up -d
### 2. Start Spring Boot app: ./mvnw spring-boot:run
### 3. Verify LDAP connectivity with Section 1 tests first
###
### EXECUTION ORDER:
### 1. Run Section 1 (Health Checks) first
### 2. Run Section 2 (Authentication) to verify login works
### 3. Run remaining sections in order
### 4. Run Section 11 (Cleanup) at the end
###
### EXPECTED RESULTS:
### ✅ Section 1: All health checks should pass
### ✅ Section 2: Existing LDAP users should login successfully
### ✅ Section 3: JWT operations should work with valid tokens
### ✅ Section 4: CRUD operations should work as expected
### ✅ Section 5: Role assignments should be visible in JWT claims
### ✅ Section 6: Token refresh should work properly
### ✅ Section 7: Multiple sessions should work independently
### ✅ Section 8: Bulk operations should complete successfully
### ❌ Section 9: Error cases should fail gracefully with proper error messages
### ✅ Section 10: End-to-end workflows should complete successfully
### ✅ Section 11: Cleanup should remove all test data
###
### VARIABLES USED:
### - Replace TOKEN_HERE with actual tokens from login responses
### - Use response variables: {{login.response.body.accessToken}}
### - Tokens are automatically captured for subsequent requests
###
### MONITORING:
### - Check application logs for detailed error information
### - Monitor LDAP server logs: docker logs openldap
### - Use /api/debug endpoints for troubleshooting
###
### PERFORMANCE EXPECTATIONS:
### - Login operations: < 500ms
### - Token validation: < 100ms
### - CRUD operations: < 300ms
### - LDAP operations: < 200ms
###
### ============================================